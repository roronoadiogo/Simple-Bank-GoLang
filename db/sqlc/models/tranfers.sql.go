// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: tranfers.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createTransfers = `-- name: CreateTransfers :one
INSERT INTO transfers (
    from_account_id, to_account_id, amount
) VALUES (
    $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransfersParams struct {
	FromAccountID sql.NullInt64 `db:"from_account_id" json:"from_account_id"`
	ToAccountID   sql.NullInt64 `db:"to_account_id" json:"to_account_id"`
	Amount        int64         `db:"amount" json:"amount"`
}

func (q *Queries) CreateTransfers(ctx context.Context, arg CreateTransfersParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfers, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfers = `-- name: DeleteTransfers :exec
DELETE FROM transfers
WHERE id = $1
`

func (q *Queries) DeleteTransfers(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfers, id)
	return err
}

const getTranfer = `-- name: GetTranfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTranfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTranfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfersFromAccount = `-- name: GetTransfersFromAccount :many
SELECT t.id, t.to_account_id, t.amount, t.created_at FROM transfers AS t
INNER JOIN accounts AS a
ON a.id = t.from_account_id 
WHERE a.id = $1
LIMIT $2
OFFSET $3
`

type GetTransfersFromAccountParams struct {
	ID     int64 `db:"id" json:"id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetTransfersFromAccountRow struct {
	ID          int64         `db:"id" json:"id"`
	ToAccountID sql.NullInt64 `db:"to_account_id" json:"to_account_id"`
	Amount      int64         `db:"amount" json:"amount"`
	CreatedAt   time.Time     `db:"created_at" json:"created_at"`
}

func (q *Queries) GetTransfersFromAccount(ctx context.Context, arg GetTransfersFromAccountParams) ([]GetTransfersFromAccountRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersFromAccount, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransfersFromAccountRow
	for rows.Next() {
		var i GetTransfersFromAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
